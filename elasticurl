#!/bin/bash

set -euo pipefail

export SSDB_DATABASE=kube

ELASTIC_ENDPOINT="localhost:9200"
ELASTIC_AUTH="elastic:changeme"
ELASTIC_INDEX="logstash"
DEBUG=""
RAW=""
JQRECURSIVE=""
ORDER_BY="@timestamp"
ORDER_DIRECTION="asc"

EQFCNT=0
EQFKEYS=()
EQFVALUES=()

LTFCNT=0
LTFKEYS=()
LTFVALUES=()

GTFCNT=0
GTFKEYS=()
GTFVALUES=()

# copy-pasted from https://stackoverflow.com/questions/49438164/parse-json-and-json-values-with-jq
# shellcheck disable=SC2016
jqq='
def recursively(f):
	. as $in
	| if type == "object" then
			reduce keys[] as $key
				( {}; . + { ($key):  ($in[$key]  | recursively(f) )} )
	elif type == "array" then map( recursively(f) )
	else try (f as $f | if $f == . then . else ($f | recursively(f)) end) catch $in
	end;
'

function _log {
	local level="$1"
	local msg="$2"
	printf "[%s] %s\n" "$level" "$msg" 1>&2
}

function debug {
	if [ -n "$DEBUG" ]; then
		_log 'debug' "$*"
	fi
}

function error {
	_log 'error' "$*"

	exit 100
}

function print_help {
	grep '^\s*# AUTODOC ' "$0" | sed -e "s/^\s*# AUTODOC //g"
}

function add_filter {
	case "$1" in
		eq)
			EQFCNT=$(( EQFCNT + 1 ))
			EQFKEYS+=( "$2" )
			EQFVALUES+=( "$3" )
			;;

		lt)
			LTFCNT=$(( LTFCNT + 1 ))
			LTFKEYS+=( "$2" )
			LTFVALUES+=( "$3" )
			;;

		gt)
			GTFCNT=$(( GTFCNT + 1 ))
			GTFKEYS+=( "$2" )
			GTFVALUES+=( "$3" )
			;;

		*)
			error "unknown filter='$1'"
			;;
	esac
}

function output {
	query='.hits.hits[]._source|del(.message)|del(."@timestamp")|del(."@version")'
	if [ -n "$JQRECURSIVE" ]; then
		query=$(printf '%s%s|recursively(fromjson)' "$jqq" "$query")
	fi
	debug "jq query='$query'"
	jq "$query"
}

# {"sort":[{"@timestamp":{"order":"asc"}}],"query":{"bool":{"filter":[{"range":{"@timestamp":{"gte":"2021-05-12T12:00","lte":"2021-05-14"}}},{"match":{"status":"200"}}]}}}
function elasticRequest {
	filters=()

	for i in $(seq 0 $(( EQFCNT - 1 ))); do
		f=$(printf '{"match":{"%s":"%s"}}' "${EQFKEYS[$i]}" "${EQFVALUES[$i]}")
		filters+=("$f")
	done

	for j in $(seq 0 $(( GTFCNT - 1 ))); do
		f=$(printf '{"range":{"%s":{"gte":"%s"}}}' "${GTFKEYS[$j]}" "${GTFVALUES[$j]}")
		filters+=("$f")
	done

	for k in $(seq 0 $(( LTFCNT - 1 ))); do
		f=$(printf '{"range":{"%s":{"lte":"%s"}}}' "${LTFKEYS[$k]}" "${LTFVALUES[$k]}")
		filters+=("$f")
	done

	f=$(printf '%s,' "${filters[@]}")
	# remove trailing coma
	f="${f%,}"

	body=$(printf '{"sort":[{"%s":{"order":"%s"}}],"query":{"bool":{"filter":[%s]}}}' "$ORDER_BY" "$ORDER_DIRECTION" "$f")
	debug "body='$body'"
	echo "$body"
}

function elastiCURL {
	if [ -n "$DEBUG" ]; then
		echo "curl -s -H 'Content-Type: application/json' -d '$(elasticRequest)' --user \"$ELASTIC_AUTH\" \"$ELASTIC_ENDPOINT/$ELASTIC_INDEX/_search?pretty\""
		exit 0
	fi

	curl -s -H 'Content-Type: application/json' -d "$(elasticRequest)" --user "$ELASTIC_AUTH" "$ELASTIC_ENDPOINT/$ELASTIC_INDEX/_search?pretty"
}

# AUTODOC elasticurl [OPTIONS]
# AUTODOC 	retrieve logs from elasticsearch
# AUTODOC 
# AUTODOC configurable options are
# AUTODOC 
while [[ $# -gt 0 ]]; do
	option="$1"

	case $option in
		# AUTODOC 	-a|--auth user:password
		# AUTODOC 		specify credentials for elasticsearch (default='elastic:changeme')
		# AUTODOC 
		-a|--auth)
			[ -z "${2:-}" ] && error "$option param can not be empty"
			ELASTIC_AUTH="$2"
			shift 2
			;;

		# AUTODOC 	-f|--filter|--eq key value
		# AUTODOC 		specify filter for output logs
		# AUTODOC 
		-f|--filter|--eq)
			[ -z "${2:-}" ] && error "$option param can not be empty"
			[ -z "${3:-}" ] && error "$option second param can not be empty"
			add_filter eq "$2" "$3"
			shift 3
			;;

		# AUTODOC 	-l|--lt|--less key value
		# AUTODOC 		specify filter for output logs
		# AUTODOC 
		-l|--lt|--less)
			[ -z "${2:-}" ] && error "$option param can not be empty"
			[ -z "${3:-}" ] && error "$option second param can not be empty"
			add_filter lt "$2" "$3"
			shift 3
			;;

		# AUTODOC 	-g|--gt|--greater key value
		# AUTODOC 		specify filter for output logs
		# AUTODOC 
		-g|--gt|--greater)
			[ -z "${2:-}" ] && error "$option param can not be empty"
			[ -z "${3:-}" ] && error "$option second param can not be empty"
			add_filter gt "$2" "$3"
			shift 3
			;;

		# AUTODOC 	-o|--order-by key ?direction
		# AUTODOC 		order by specified key (default='@timestamp') in optional specified direction (default='asc')
		# AUTODOC 
		-o|--order-by)
			[ -z "${2:-}" ] && error "$option param can not be empty"
			ORDER_BY="$2"
			if [ -z "${3:-}" ]; then
				shift 2
			else
				case "$3" in
					desc|descending|DESC|DESCENDING)
						ORDER_DIRECTION="desc"
						shift 3
						;;

					asc|ascending|ASC|ASCENDING)
						ORDER_DIRECTION="asc"
						shift 3
						;;

					*)
						shift 2
						;;
				esac
			fi
			;;

		# AUTODOC 	-i|--index 'index_name'
		# AUTODOC 		specify elastic index (default='logstash')
		# AUTODOC 
		-i|--index)
			[ -z "${2:-}" ] && error "$option param can not be empty"
			ELASTIC_INDEX="$2"
			shift 2
			;;

		# AUTODOC 	-n|--namespace 'k8s_namespace'
		# AUTODOC 		specify namespace
		# AUTODOC 		equivalent to -f namespace=k8s_namespace
		# AUTODOC 
		-n|--namespace)
			[ -z "${2:-}" ] && error "$option param can not be empty"
			add_filter eq namespace "$2"
			shift 2
			;;

		# AUTODOC 	-s|--service 'service_name'
		# AUTODOC 		specify service
		# AUTODOC 		equivalent to -f service=service_name
		# AUTODOC 
		-s|--service)
			[ -z "${2:-}" ] && error "$option param can not be empty"
			add_filter eq service "$2"
			shift 2
			;;

		# AUTODOC 	-e|--endpoint host
		# AUTODOC 		specify elasticsearch endpoint (default='localhost:9200')
		# AUTODOC 
		-e|--endpoint)
			[ -z "${2:-}" ] && error "$option param can not be empty"
			ELASTIC_ENDPOINT="$2"
			shift 2
			;;

		# AUTODOC 	-d|--debug
		# AUTODOC 		enable debug output
		# AUTODOC 
		-d|--debug)
			DEBUG=1
			shift
			;;

		# AUTODOC 	-r|--raw
		# AUTODOC 		raw elastic output
		# AUTODOC 
		-r|--raw)
			RAW=1
			shift
			;;

		# AUTODOC 	-R|--recursive-jq
		# AUTODOC 		apply additional jq recursive JSON parsing
		# AUTODOC 
		-R|--recursive-jq)
			JQRECURSIVE=1
			shift
			;;


		# AUTODOC 	--help
		# AUTODOC 		print help
		# AUTODOC 
		--help)
			print_help
			exit 0
			;;

		*)
			print_help
			error "unknown option='$option'"
			break;;
	esac
done

if [ "$EQFCNT" -gt 0 ]; then
	for key in "${EQFKEYS[@]}"; do
		debug "key=$key"
	done

	for value in "${EQFVALUES[@]}"; do
		debug "value=$value"
	done
fi

if [ "$LTFCNT" -gt 0 ]; then
	for key in "${LTFKEYS[@]}"; do
		debug "ltkey=$key"
	done

	for value in "${LTFVALUES[@]}"; do
		debug "ltvalue=$value"
	done
fi

if [ "$GTFCNT" -gt 0 ]; then
	for key in "${GTFKEYS[@]}"; do
		debug "gtkey=$key"
	done

	for value in "${GTFVALUES[@]}"; do
		debug "gtvalue=$value"
	done
fi

if [ -z "$RAW" ]; then
	if [ -z "$DEBUG" ]; then
		elastiCURL | output
	else
		elastiCURL
	fi
else
	elastiCURL
fi
